// <auto-generated />
using System;
using MedicalInformationSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedicalInformationSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240409232058_AddPatientIndex")]
    partial class AddPatientIndex
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.CommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ConsultationId");

                    b.HasIndex("ParentId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.ConsultationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InspectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Consultation", (string)null);
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.DiagnosisEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("IcdDiagnosisNewId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InspectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IcdDiagnosisNewId");

                    b.HasIndex("InspectionId");

                    b.ToTable("Diagnosis", (string)null);
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.DoctorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("SpecialityId");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.IcdEntity", b =>
                {
                    b.Property<Guid>("NewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<string>("ID_PARENT")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IcdRootNewId")
                        .HasColumnType("uuid");

                    b.Property<string>("MKB_CODE")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MKB_NAME")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NewId");

                    b.HasIndex("IcdRootNewId");

                    b.HasIndex("MKB_CODE");

                    b.HasIndex("MKB_NAME");

                    b.HasIndex("NewId");

                    b.ToTable("Icd");
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.IcdRootsEntity", b =>
                {
                    b.Property<Guid>("NewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<string>("MKB_CODE")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MKB_NAME")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NewId");

                    b.HasIndex("MKB_CODE");

                    b.HasIndex("MKB_NAME");

                    b.HasIndex("NewId");

                    b.ToTable("IcdRoots");
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.InspectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Anamnesis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Complaints")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Conclusion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasChain")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasNested")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("NextInspectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("NextVisitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PreviousInspectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("NextInspectionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PreviousInspectionId");

                    b.ToTable("Inspection", (string)null);
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.PasswordEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TokenSeries")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Password", (string)null);
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.PatientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.SpecialityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Speciality", (string)null);
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.CommentEntity", b =>
                {
                    b.HasOne("MedicalInformationSystem.Data.Entities.DoctorEntity", "Author")
                        .WithMany("Comment")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalInformationSystem.Data.Entities.ConsultationEntity", "Consultation")
                        .WithMany("Comment")
                        .HasForeignKey("ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalInformationSystem.Data.Entities.CommentEntity", "Parent")
                        .WithMany("NestedComment")
                        .HasForeignKey("ParentId");

                    b.Navigation("Author");

                    b.Navigation("Consultation");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.ConsultationEntity", b =>
                {
                    b.HasOne("MedicalInformationSystem.Data.Entities.InspectionEntity", "Inspection")
                        .WithMany("Consultations")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalInformationSystem.Data.Entities.SpecialityEntity", "Speciality")
                        .WithMany("Consultation")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.DiagnosisEntity", b =>
                {
                    b.HasOne("MedicalInformationSystem.Data.Entities.IcdEntity", "IcdDiagnosis")
                        .WithMany()
                        .HasForeignKey("IcdDiagnosisNewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalInformationSystem.Data.Entities.InspectionEntity", "Inspection")
                        .WithMany("Diagnoses")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IcdDiagnosis");

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.DoctorEntity", b =>
                {
                    b.HasOne("MedicalInformationSystem.Data.Entities.SpecialityEntity", "Speciality")
                        .WithMany("Doctor")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.IcdEntity", b =>
                {
                    b.HasOne("MedicalInformationSystem.Data.Entities.IcdRootsEntity", "IcdRoot")
                        .WithMany()
                        .HasForeignKey("IcdRootNewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IcdRoot");
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.InspectionEntity", b =>
                {
                    b.HasOne("MedicalInformationSystem.Data.Entities.DoctorEntity", "Doctor")
                        .WithMany("Inspection")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalInformationSystem.Data.Entities.InspectionEntity", "NextInspection")
                        .WithMany()
                        .HasForeignKey("NextInspectionId");

                    b.HasOne("MedicalInformationSystem.Data.Entities.PatientEntity", "Patient")
                        .WithMany("Inspection")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalInformationSystem.Data.Entities.InspectionEntity", "PreviousInspection")
                        .WithMany()
                        .HasForeignKey("PreviousInspectionId");

                    b.Navigation("Doctor");

                    b.Navigation("NextInspection");

                    b.Navigation("Patient");

                    b.Navigation("PreviousInspection");
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.PasswordEntity", b =>
                {
                    b.HasOne("MedicalInformationSystem.Data.Entities.DoctorEntity", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.CommentEntity", b =>
                {
                    b.Navigation("NestedComment");
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.ConsultationEntity", b =>
                {
                    b.Navigation("Comment");
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.DoctorEntity", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.InspectionEntity", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Diagnoses");
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.PatientEntity", b =>
                {
                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("MedicalInformationSystem.Data.Entities.SpecialityEntity", b =>
                {
                    b.Navigation("Consultation");

                    b.Navigation("Doctor");
                });
#pragma warning restore 612, 618
        }
    }
}
